prototype(Sitegeist.Lazybones:Source) < prototype(Neos.Fusion:Component) {
    @propTypes {
        imageSource = ${PropTypes.instanceOf('\\Sitegeist\\Kaleidoscope\\EelHelpers\\ImageSourceHelperInterface')}
    }

    lazy = Sitegeist.Lazybones:Lazy.Enabled

    imageSource = null
    imageSource.@process.applyFromPicture = ${!value ? __imageSource : value}
    srcset = null
    srcset.@process.applyFromPicture = ${!value ? __srcset : value}
    sizes = null
    sizes.@process.applyFromPicture = ${!value ? __sizes : value}
    width = null
    width.@process.applyFromPicture = ${!value ? __width : value}
    height = null
    height.@process.applyFromPicture = ${!value ? __height : value}
    format = null
    format.@process.applyFromPicture = ${!value ? __format : value}
    type = null
    media = null

    renderer = Neos.Fusion:Case {
        lazy {
            condition = ${props.lazy}
            renderer = Neos.Fusion:Component {

                # apply format, width and height to the imageSource
                imageSource = ${props.imageSource}
                imageSource.@process.applyWidth = ${props.width ? value.setWidth(props.width) : value}
                imageSource.@process.applyHeight = ${props.height ? value.setHeight(props.height) : value}
                imageSource.@process.applyFormat = ${props.format ? value.setFormat(props.format) : value}

                # apply the format to the type
                type = ${props.format ? 'image/' + props.format : props.type}
                type.@process.applyFormat = ${'image/' + props.format}
                type.@process.applyFormat.@if.hasFormat = ${props.format}

                srcset = ${props.srcset}
                sizes = ${props.sizes}
                media = ${props.media}

                renderer = afx`
                    <source @if.has={props.imageSource}
                        media={props.media}
                        type={props.type}
                        data-srcset={props.imageSource.srcset(props.srcset)}
                        data-srcset.@if.has={props.srcset}
                        sizes={props.sizes}
                        sizes.@process.join={Type.isArray(value) ? Array.join(value, ', ') : value}
                    />
                `
            }
        }

        default {
            condition = true
            renderer = afx`
                <Sitegeist.Kaleidoscope:Source {...props} />
            `
        }
    }
}
