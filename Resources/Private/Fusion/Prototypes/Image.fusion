prototype(Sitegeist.Lazybones:Image) < prototype(Neos.Fusion:Component) {
    @styleguide {
        props {
            imageSource = Sitegeist.Kaleidoscope:DummyImageSource
            alt = 'Elva dressed as a fairy'
        }

        propSets {
            multires_array {
                srcset = ${['1x', '1.5x', '2x']}
            }

            multires_string {
                srcset = '1x, 1.5x, 2x'
            }

            multisize_array {
                srcset = ${['320w', '400w', '600w', '800w', '1000w', '1200w', '1600']}
            }

            multisize_string {
                srcset = '320w, 400ww, 600w, 800w, 1000w, 1200w, 1600'
            }

            sizes_array {
                srcset = ${['320w', '400w', '600w', '800w', '1000w', '1200w', '1600']}
                sizes = ${['(max-width: 320px) 280px', '(max-width: 480px) 440px', '800px']}
            }

            sizes_string {
                srcset = '320w, 400ww, 600w, 800w, 1000w, 1200w, 1600'
                sizes = '(max-width: 320px) 280px, (max-width: 480px) 440px, 800px'
            }
        }
    }

    @propTypes {
        imageSource = ${PropTypes.instanceOf('\\Sitegeist\\Kaleidoscope\\EelHelpers\\ImageSourceHelperInterface')}
    }

    lazy = Sitegeist.Lazybones:Lazy.Enabled
    lazyClass = Sitegeist.Lazybones:Lazy.ClassName
    lazyWidth = Sitegeist.Lazybones:Lazy.Width

    imageSource = null
    srcset = null
    sizes = null
    alt = null
    title = null
    class = null
    width = null
    height = null
    format = null
    dimensions = true

    renderer = Neos.Fusion:Case {

        lazy {
            condition = ${props.lazy}
            renderer = Neos.Fusion:Component {

                # apply format, width and height to the imageSource
                imageSource = ${props.imageSource}
                imageSource.@process.applyWidth = ${props.width ? value.setWidth(props.width) : value}
                imageSource.@process.applyHeight = ${props.height ? value.setHeight(props.height) : value}
                imageSource.@process.applyFormat = ${props.format ? value.setFormat(props.format) : value}

                srcset = ${props.srcset}
                sizes = ${props.sizes}
                alt =  ${props.alt}
                title = ${props.title}
                class = ${props.class}
                dimensions = ${props.dimensions}

                lazyClass = ${props.lazyClass}
                lazyWidth = ${props.lazyWidth}

                renderer = afx`
                    <img @if.has={props.imageSource}
                        src={props.lazyWidth ? props.imageSource.setWidth(props.lazyWidth, true) : null}

                        data-src={props.imageSource.src()}
                        data-srcset={props.imageSource.srcset(props.srcset)}
                        data-srcset.@if.has={props.srcset}
                        data-sizes={props.sizes}
                        data-sizes.@process.join={Type.isArray(value) ? Array.join(value, ', ') : value}

                        width={props.dimensions ? props.imageSource.currentWidth : null}
                        height={props.dimensions ? props.imageSource.currentHeight : null}

                        class={props.class ? props.class + ' ' + props.lazyClass : props.lazyClass}
                        alt={props.alt}
                        title={props.title}
                    />
                `
            }
        }

        default {
            condition = true
            renderer = afx`
                <Sitegeist.Kaleidoscope:Image {...props} />
            `
        }
    }
}
