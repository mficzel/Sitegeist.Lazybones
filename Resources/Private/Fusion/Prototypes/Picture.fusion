prototype(Sitegeist.Lazybones:Picture) < prototype(Neos.Fusion:Component) {
    @styleguide {
        props {
            imageSource = Sitegeist.Kaleidoscope:DummyImageSource
            sources = Neos.Fusion:RawArray {
                1 = Neos.Fusion:RawArray {
                    srcset = '1x, 1.5x, 2x'
                    media = 'screen and (min-width: 1600px)'
                }
                2 = Neos.Fusion:RawArray {
                    srcset = '320w, 480w, 800w, 1000w'
                    sizes = '(max-width: 320px) 280px, (max-width: 480px) 440px, 800px'
                    media = 'screen and (max-width: 1599px)'
                }
                3 = Neos.Fusion:RawArray {
                    imageSource = Sitegeist.Kaleidoscope:DummyImageSource {
                        text = "im am here for printing"
                    }
                    media = 'print'
                }
            }
            alt = 'Elva dressed as a fairy'
        }
    }

    lazy = Sitegeist.Lazybones:Lazy.Enabled
    lazyClass = Sitegeist.Lazybones:Lazy.ClassName
    lazyWidth = Sitegeist.Lazybones:Lazy.Width

    imageSource = null
    srcset = null
    sizes = null
    sources = null
    formats = null
    alt = null
    title = null
    class = null
    content = ''
    dimensions = null

    #
    # put the values that shall be applied to sources automatically to the context
    # to make them available to all props during evaluation
    #
    @context {
        __imageSource = ${this.imageSource}
        __srcset = ${this.srcset}
        __sizes = ${this.sizes}
    }

    renderer = Neos.Fusion:Case {

        lazy {
            condition = ${props.lazy}
            renderer = afx`
                <picture @if.has={props.imageSource} class={props.class ? props.class + ' ' + props.lazyClass : props.lazyClass }>
                    {props.content}
                    <Neos.Fusion:Collection collection={props.sources} itemName="source" @if.has={props.sources}>
                        <Sitegeist.Lazybones:Source
                            lazy={props.lazy}
                            imageSource={source.imageSource ? source.imageSource : props.imageSource}
                            type={source.type}
                            media={source.media}
                            format={source.format}
                            srcset={source.srcset ? source.srcset : props.srcset}
                            sizes={source.sizes ? source.sizes : props.sizes}
                        />
                    </Neos.Fusion:Collection>
                    <Neos.Fusion:Collection
                        @if.has={props.imageSource && props.formats}
                        collection={Type.isArray(props.formats) ? props.formats : String.split(props.formats, ',')}
                        itemName="format"
                    >
                        <Sitegeist.Lazybones:Source format={String.trim(format)} />
                    </Neos.Fusion:Collection>
                    <Sitegeist.Lazybones:Image
                        lazy={props.lazy}
                        lazyClass={props.lazyClass}
                        lazyWidth={props.lazyWidth}

                        imageSource={props.imageSource}
                        sizes={props.sizes}
                        srcset={props.srcset}
                        alt={props.alt}
                        title={props.title}

                        dimensions={!props.content && !props.sources}
                        dimensions.@override.fromProps={props.dimensions}
                        dimensions.@override.fromProps.@if.isBoolean={Type.isBoolean(props.dimensions)}
                    />
                </picture>
            `
        }

        default {
            condition = true
            renderer = afx`
                <Sitegeist.Kaleidoscope:Picture {...props} >{props.content}</Sitegeist.Kaleidoscope:Picture>
            `
        }
    }
}
